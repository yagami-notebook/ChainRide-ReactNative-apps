#
# bitrise.yml
# Copyright Â© 2017 Netguru Sp. z o.o. All rights reserved.
#
# This `bitrise.yml` variant contains the default iOS configuration to be used
# in a React Native app repository. You can strip the comments in your
# `bitrise.yml`, if you want.
#
# Scripts in the following `bitrise.yml` file makes use of the following
# environment variables that should be set up as secret:
#
# - `HOCKEYAPP_APP_ID_STAGING`, `HOCKEYAPP_APP_ID_PRODUCTION`: App IDs of
#   staging and production HockeyApp apps.
#
# - `HOCKEYAPP_API_TOKEN_STAGING`, `HOCKEYAPP_API_TOKEN_PRODUCTION`: API tokens
#   used to upload and release builds to HockeyApp app.
#
# - `SLACK_WEBHOOK_URL`: A generic webhook integration URL used to post
#   notifications to Slack.
#
# - `SLACK_CHANNEL` (optional): A target Slack channel to post notifications to.
#   If not present, the default channel of the integration is used.
#
# - `JIRA_DOMAIN` (optional): A domain URL to the JIRA installation, typically a
#   subdomain on `atlassian.net`. If not present, information about JIRA task
#   will not be included in a Slack notification.
#
# - `JIRA_PROJECT_KEY` (optional): A JIRA project key assocciated with the
#   repository. If not present, information about JIRA task will not be included
#   in a Slack notification.
#
# Also, those scripts use the following environment variables that are declared
# publicly in the following file:
#
# - `XCODEBUILD_PROJECT`: A path to a project or a workspace Xcode file.
#
# - `XCODEBUILD_SCHEME`: A name of the scheme to be built.
#
# - `XCODEBUILD_OPTIONS`: Additional build settings passed straight to each
#   `xcodebuild` invocation.
#

# CLI metadata.
#
# This metadata is required to always be in `bitrise.yml`. The `format_version`
# setting will be occasionally bumped.

format_version: 1.3.1
default_step_lib_source: https://github.com/bitrise-io/bitrise-steplib.git

# Workflow trigger map.
#
# The following trigger map triggers a build only for pull requests against
# `develop` and `master` branches (from forks as well) and pushes to `develop`
# and `master` branches.
#
# More on trigger maps: http://devcenter.bitrise.io/webhooks/trigger-map

trigger_map:

  - push_branch: develop
    workflow: build-staging

  - push_branch: master
    workflow: build-release-candidate

  - pull_request_target_branch: develop
    workflow: build-pull-request

  - pull_request_target_branch: master
    workflow: build-pull-request

# Environment configuration.
#
# This list contains the default environment variables shared between workflows.

app:
  envs:
    - XCODEBUILD_PROJECT: ./ios/BlablaClone.xcodeproj
    - XCODEBUILD_SCHEME: BlablaClone
    - XCODEBUILD_OPTIONS: ''

# Workflow declarations.
#
# This list contains workflows used in the above trigger map.

workflows:

  # Build, test and deploy a staging app.
  #
  # This workflow pulls dependencies, builds and tests an app with staging
  # scheme and finally pushes the archived build to HockeyApp.

  build-staging:
    envs:
      - HOCKEYAPP_API_TOKEN: $HOCKEYAPP_API_TOKEN_STAGING
      - HOCKEYAPP_APP_ID: $HOCKEYAPP_APP_ID_STAGING
    before_run:
      - cache-pull
      - bootstrap-dotenv
      # - bootstrap-cocoapods
      - bootstrap-react-native
      - test-react-native
      - test-xcode
      - bootstrap-code-signing
      - archive-xcode
    after_run:
      - cache-push
      - deploy-hockeyapp
      - deploy-bitriseio
      - notify-slack

  # Build, test and deploy a release candidate app.
  #
  # This workflow pulls dependencies, builds and tests an app with production
  # scheme and finally pushes the archived build to HockeyApp.

  build-release-candidate:
    envs:
      - HOCKEYAPP_API_TOKEN: $HOCKEYAPP_API_TOKEN_PRODUCTION
      - HOCKEYAPP_APP_ID: $HOCKEYAPP_APP_ID_PRODUCTION
    before_run:
      - cache-pull
      - bootstrap-dotenv
      # - bootstrap-cocoapods
      - bootstrap-react-native
      - test-react-native
      - test-xcode
      - bootstrap-code-signing
      - archive-xcode
    after_run:
      - cache-push
      - deploy-hockeyapp
      - deploy-bitriseio
      - notify-slack

  # Build and test a staging app.
  #
  # This workflow pulls dependencies and then builds and tests an app with
  # staging scheme.

  build-pull-request:
    before_run:
      - cache-pull
      - bootstrap-dotenv
      # - bootstrap-cocoapods
      - bootstrap-react-native
      - test-react-native
      - test-xcode
    after_run:
      - cache-push
      - deploy-bitriseio
      - notify-slack

  # Pull previously cached directories.

  cache-pull:
    steps:
      - cache-pull: {}

  # Push cached directories.
  #
  # By default, this pushes `./Pods` and `./node_modules` directories.

  cache-push:
    steps:
      - cache-push:
          inputs:
            - cache_paths: |-
                ./ios/Pods
                ./node_modules
  # Bootstrap `.env` file by cloning `.env.bitrise` file and then assigning the
  # appropriate values from environment variables set up in this `bitrise.yml`
  # and in Bitrise UI.

  bootstrap-dotenv:
    steps:
      - ruby-script:
          inputs:
            - ruby_content: |-
                template = ENV['DOTENV_TEMPLATE_FILE'] || '.env.bitrise'
                output_file = ENV['DOTENV_OUTPUT_FILE'] || '.env'
                File.open(output_file, 'w') do |output|
                  File.open(template).each do |line|
                    output.write(line.sub(/\$[A-Z0-9_]+/) { |match| ENV[match.sub('$', '')] })
                  end
                end
  # Bootstrap dependencies using CocoaPods package manager.
  #
  # If you don't use this package manager, you can remove this workflow.

  bootstrap-cocoapods:
    steps:
      - cocoapods-install: {}

  # Bootstrap React Native dependencies using NVM and Yarn package managers.

  bootstrap-react-native:
    steps:
      - nvm: {}
      - yarn: {}
      - install-react-native: {}

  # Bootstrap code signing by installing certificates and provisioning profiles.

  bootstrap-code-signing:
    steps:
      - certificate-and-profile-installer: {}

  # Bundle and test an app using `react-native` and `npm` commands.

  test-react-native:
    steps:
      - react-native-bundle:
          inputs:
            - platform: ios
            - entry_file: index.ios.js
      - yarn:
          inputs:
            - command: lint
      - yarn:
          inputs:
            - command: test

  # Build and test an app using `xcodebuild` command.

  test-xcode:
    steps:
      - xcode-test:
          inputs:
            - project_path: $XCODEBUILD_PROJECT
            - scheme: $XCODEBUILD_SCHEME
            - xcodebuild_test_options: $XCODEBUILD_OPTIONS
            - generate_code_coverage_files: 'yes'

  # Archive an app using `xcodebuild` command.

  archive-xcode:
    steps:
      - xcode-archive:
          inputs:
            - project_path: $XCODEBUILD_PROJECT
            - scheme: $XCODEBUILD_SCHEME
            - xcodebuild_options: $XCODEBUILD_OPTIONS

  # Deploy a built app to HockeyApp.

  deploy-hockeyapp:
    steps:
      - hockeyapp-deploy:
          inputs:
            - api_token: $HOCKEYAPP_API_TOKEN
            - app_id: $HOCKEYAPP_APP_ID
            - notify: 0

  # Deploy build artifacts to bitrise.io.

  deploy-bitriseio:
    steps:
      - deploy-to-bitrise-io:
          inputs:
            - notify_user_groups: none
            - is_enable_public_page: false

  # Notify about build on Slack.
  #
  # If you don't use Slack integration, you can remove this workflow.

  notify-slack:
    steps:
      - git::https://github.com/netguru/bitrise-step-slack.git@master:
          title: slack
          inputs:
            - webhook_url: $SLACK_WEBHOOK_URL
            - channel: $SLACK_CHANNEL
